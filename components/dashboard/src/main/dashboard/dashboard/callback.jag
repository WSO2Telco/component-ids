<%
var payloadFac = require("payloadFactory.jag");
var util = require("util/utility.jag");
var log = new Log();

var msisdn = request.getParameter("username") ;
var applicationName = request.getParameter("applicationName");
var serverUrl = util.getServerUrl();
serverUrl = serverUrl + "/OAuthAdminService";

var ws = require('ws');


var webService = new ws.WSRequest();
function getCallbackURL(){

	var isAdmin=true;
    var jsonresponse=callWSReturnJSON(webService, serverUrl, "urn:getOAuthApplicationDataByAppName", new Array(applicationName));
    //log.info(jsonresponse);
    print (jsonresponse);
}

getCallbackURL();

function getAdminData() {
	var configPath = "file://" + Packages.java.lang.System.getProperty("carbon.config.dir.path");
	var amConfigPath = configPath + "/api-manager.xml";
	var file = new File(amConfigPath);
	file.open("r");
	var amConfig = new XML(file.readAll());
	file.close();
	return amConfig;
}

function call(webService, serverUrl, options, payload){
	var cookie = session.get("auth-cookie");
	var userName = session.get("user");
	var pwd = session.get("pwd");
	
	
	var amConfig = getAdminData();
	//below username and password are not logged in users data. these are only to call admin services.
	var adminUserName = String(amConfig.AuthManager.Username.text());
	var adminPwd = String(amConfig.AuthManager.Password.text());
	//webService.open(options, serverUrl, false, adminUserName, adminPwd);
	
	//log.info(adminUserName);
	//log.info(adminPwd);
	//log.info(isAdmin);
	
	if(true){
		webService.open(options, serverUrl, false, adminUserName, adminPwd);
	}else if(cookie != null){
		options["HTTPHeaders"] = [{name: "cookie", value: cookie}];
		log.debug(options["HTTPHeaders"]);
		webService.open(options, serverUrl, false);
	}else if(userName != null && pwd != null){
		webService.open(options, serverUrl, false, userName, pwd);
	}else{
		webService.open(options, serverUrl, false);
	}
	log.debug(payload);
	webService.send(payload);
}

function callWSInOnly(webService, serverUrl, action, payload){
	var options = new Array();
	options.useSOAP = 1.1;
	options.action = action;
	options.mep = 'in-only';
	try {
		call(webService, serverUrl, options, payload);
	}
	catch (e) {
		log.error(e);
		throw e;
	}
}

function callWSReturnXML(webService, serverUrl, action, params, req){
	var options = new Array();
	options.useSOAP = 1.1;
	options.action = action;
	var payload = req;

	
	if(req == null){
		if(params != null){
			payload = payloadFac.getPayload(options.action, params);
		}else{
			payload = payloadFac.getPayload(options.action);
		}
	}
	var result;
	try {
		//log.info(payload);
		 
		call(webService, serverUrl, options, payload);
		if(webService.readyState == 4){
			result = webService.responseE4X;
			return result;
		}
	}
	catch (e) {
		log.error(e);
		throw e;
	}
}


function callWSReturnJSON(webService, serverUrl, action, params, req){
	var result = callWSReturnXML(webService, serverUrl, action, params, req);
	log.debug(result);
	return E4XtoJSON(result);
}

function E4XtoJSON(xml, ignored) {
	var r, children = xml.*, attributes = xml.@*, length = children.length();
	if(length == 0) {
		r = xml.toString();
	} else if(length == 1) {
		var text = xml.text().toString();
		if(text) {
			r = text;
		}
	}
	if(r == undefined) {
		r = {};
		for each (var child in children) {
			var name = child.localName();
			var json = E4XtoJSON(child, ignored);
			var value = r[name];
			if(value) {
				if(value.length && value.push) {
					value.push(json);
				} else {
					r[name] = [value, json]
				}
			} else {
				r[name] = json;
			}
		}
	}
	if(attributes.length()) {
		var a = {}, c = 0;
		for each (var attribute in attributes) {
			var name = attribute.localName();
			if(ignored && ignored.indexOf(name) == -1) {
				a["_" + name] = attribute.toString();
				c ++;
			}
		}
		if(c) {
			if(r) a._ = r;
			return a;
		}
	}
	return r;
}

%>